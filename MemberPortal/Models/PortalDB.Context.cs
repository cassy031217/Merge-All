//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MemberPortal.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PORTALEntities : DbContext
    {
        public PORTALEntities()
            : base("name=PORTALEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Barangay> Barangays { get; set; }
        public virtual DbSet<Candidate> Candidates { get; set; }
        public virtual DbSet<CasaLedger> CasaLedgers { get; set; }
        public virtual DbSet<CasaProduct> CasaProducts { get; set; }
        public virtual DbSet<CIFOnlineUser> CIFOnlineUsers { get; set; }
        public virtual DbSet<CityMunicipality> CityMunicipalities { get; set; }
        public virtual DbSet<Clientele> Clienteles { get; set; }
        public virtual DbSet<LoanAccount> LoanAccounts { get; set; }
        public virtual DbSet<LoanApplication> LoanApplications { get; set; }
        public virtual DbSet<LoanLedger> LoanLedgers { get; set; }
        public virtual DbSet<LoanProductsMaster> LoanProductsMasters { get; set; }
        public virtual DbSet<MemberAddress> MemberAddresses { get; set; }
        public virtual DbSet<MemberDependent> MemberDependents { get; set; }
        public virtual DbSet<MemberFamily> MemberFamilies { get; set; }
        public virtual DbSet<Membership> Memberships { get; set; }
        public virtual DbSet<MembershipPaymentFee> MembershipPaymentFees { get; set; }
        public virtual DbSet<MembershipPayment> MembershipPayments { get; set; }
        public virtual DbSet<Province> Provinces { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Clientele2> Clientele2 { get; set; }
        public virtual DbSet<UserMaster> UserMasters { get; set; }
        public virtual DbSet<ValidDay> ValidDays { get; set; }
        public virtual DbSet<LoginLog> LoginLogs { get; set; }
        public virtual DbSet<CasaAccount> CasaAccounts { get; set; }
    
        public virtual ObjectResult<usp_CreateAmortization_Result1> usp_CreateAmortization(Nullable<decimal> amountDesired, Nullable<int> termsDesired)
        {
            var amountDesiredParameter = amountDesired.HasValue ?
                new ObjectParameter("AmountDesired", amountDesired) :
                new ObjectParameter("AmountDesired", typeof(decimal));
    
            var termsDesiredParameter = termsDesired.HasValue ?
                new ObjectParameter("TermsDesired", termsDesired) :
                new ObjectParameter("TermsDesired", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CreateAmortization_Result1>("usp_CreateAmortization", amountDesiredParameter, termsDesiredParameter);
        }
    
        public virtual int InsertUpdateCIFOnlineUser(Nullable<bool> isAdd, string cIFKEY, string firstName, string lastName, string middleName, Nullable<System.DateTime> birthdate, string sex, string emailAddress, Nullable<bool> confirmedEmail, string username, string password, string branchCode, Nullable<bool> isGlobalAdministrator, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> creationDate, Nullable<bool> isOnLine, string accountName, Nullable<System.Guid> gUIDLink, Nullable<System.Guid> acessCode, string accountStatus, Nullable<int> iD)
        {
            var isAddParameter = isAdd.HasValue ?
                new ObjectParameter("IsAdd", isAdd) :
                new ObjectParameter("IsAdd", typeof(bool));
    
            var cIFKEYParameter = cIFKEY != null ?
                new ObjectParameter("CIFKEY", cIFKEY) :
                new ObjectParameter("CIFKEY", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("Birthdate", birthdate) :
                new ObjectParameter("Birthdate", typeof(System.DateTime));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var confirmedEmailParameter = confirmedEmail.HasValue ?
                new ObjectParameter("ConfirmedEmail", confirmedEmail) :
                new ObjectParameter("ConfirmedEmail", typeof(bool));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("BranchCode", branchCode) :
                new ObjectParameter("BranchCode", typeof(string));
    
            var isGlobalAdministratorParameter = isGlobalAdministrator.HasValue ?
                new ObjectParameter("IsGlobalAdministrator", isGlobalAdministrator) :
                new ObjectParameter("IsGlobalAdministrator", typeof(bool));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var isOnLineParameter = isOnLine.HasValue ?
                new ObjectParameter("IsOnLine", isOnLine) :
                new ObjectParameter("IsOnLine", typeof(bool));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var gUIDLinkParameter = gUIDLink.HasValue ?
                new ObjectParameter("GUIDLink", gUIDLink) :
                new ObjectParameter("GUIDLink", typeof(System.Guid));
    
            var acessCodeParameter = acessCode.HasValue ?
                new ObjectParameter("AcessCode", acessCode) :
                new ObjectParameter("AcessCode", typeof(System.Guid));
    
            var accountStatusParameter = accountStatus != null ?
                new ObjectParameter("AccountStatus", accountStatus) :
                new ObjectParameter("AccountStatus", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateCIFOnlineUser", isAddParameter, cIFKEYParameter, firstNameParameter, lastNameParameter, middleNameParameter, birthdateParameter, sexParameter, emailAddressParameter, confirmedEmailParameter, usernameParameter, passwordParameter, branchCodeParameter, isGlobalAdministratorParameter, lastLoginDateParameter, creationDateParameter, isOnLineParameter, accountNameParameter, gUIDLinkParameter, acessCodeParameter, accountStatusParameter, iDParameter);
        }
    
        public virtual ObjectResult<usp_GetSavingAcctLedger_Result1> usp_GetSavingAcctLedger(Nullable<int> loanAcctId, string cifkey)
        {
            var loanAcctIdParameter = loanAcctId.HasValue ?
                new ObjectParameter("loanAcctId", loanAcctId) :
                new ObjectParameter("loanAcctId", typeof(int));
    
            var cifkeyParameter = cifkey != null ?
                new ObjectParameter("cifkey", cifkey) :
                new ObjectParameter("cifkey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSavingAcctLedger_Result1>("usp_GetSavingAcctLedger", loanAcctIdParameter, cifkeyParameter);
        }
    
        public virtual ObjectResult<usp_GetMemberSavingsAcct_Result3> usp_GetMemberSavingsAcct(string acctName)
        {
            var acctNameParameter = acctName != null ?
                new ObjectParameter("AcctName", acctName) :
                new ObjectParameter("AcctName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetMemberSavingsAcct_Result3>("usp_GetMemberSavingsAcct", acctNameParameter);
        }
    
        public virtual ObjectResult<usp_GetMemberSCAcct_Result> usp_GetMemberSCAcct(string acctName)
        {
            var acctNameParameter = acctName != null ?
                new ObjectParameter("AcctName", acctName) :
                new ObjectParameter("AcctName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetMemberSCAcct_Result>("usp_GetMemberSCAcct", acctNameParameter);
        }
    
        public virtual ObjectResult<usp_GetSharedCapitalLedger_Result> usp_GetSharedCapitalLedger(Nullable<int> loanAcctId, string cifkey)
        {
            var loanAcctIdParameter = loanAcctId.HasValue ?
                new ObjectParameter("loanAcctId", loanAcctId) :
                new ObjectParameter("loanAcctId", typeof(int));
    
            var cifkeyParameter = cifkey != null ?
                new ObjectParameter("cifkey", cifkey) :
                new ObjectParameter("cifkey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSharedCapitalLedger_Result>("usp_GetSharedCapitalLedger", loanAcctIdParameter, cifkeyParameter);
        }
    
        public virtual ObjectResult<usp_GetTimeDepositAcct_Result> usp_GetTimeDepositAcct(string acctName)
        {
            var acctNameParameter = acctName != null ?
                new ObjectParameter("AcctName", acctName) :
                new ObjectParameter("AcctName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTimeDepositAcct_Result>("usp_GetTimeDepositAcct", acctNameParameter);
        }
    
        public virtual ObjectResult<usp_GetTimeDepositLedger_Result> usp_GetTimeDepositLedger(Nullable<int> loanAcctId, string cifkey)
        {
            var loanAcctIdParameter = loanAcctId.HasValue ?
                new ObjectParameter("loanAcctId", loanAcctId) :
                new ObjectParameter("loanAcctId", typeof(int));
    
            var cifkeyParameter = cifkey != null ?
                new ObjectParameter("cifkey", cifkey) :
                new ObjectParameter("cifkey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTimeDepositLedger_Result>("usp_GetTimeDepositLedger", loanAcctIdParameter, cifkeyParameter);
        }
    
        public virtual int UpdateCIFOnlineRegistration(string username, string password, Nullable<System.Guid> gUIDLink, Nullable<System.Guid> activatecode)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var gUIDLinkParameter = gUIDLink.HasValue ?
                new ObjectParameter("GUIDLink", gUIDLink) :
                new ObjectParameter("GUIDLink", typeof(System.Guid));
    
            var activatecodeParameter = activatecode.HasValue ?
                new ObjectParameter("Activatecode", activatecode) :
                new ObjectParameter("Activatecode", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCIFOnlineRegistration", usernameParameter, passwordParameter, gUIDLinkParameter, activatecodeParameter);
        }
    
        public virtual ObjectResult<usp_GetMemberAcctLedger_Result2> usp_GetMemberAcctLedger(string accountNo, Nullable<int> loanAcctId)
        {
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var loanAcctIdParameter = loanAcctId.HasValue ?
                new ObjectParameter("loanAcctId", loanAcctId) :
                new ObjectParameter("loanAcctId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetMemberAcctLedger_Result2>("usp_GetMemberAcctLedger", accountNoParameter, loanAcctIdParameter);
        }
    
        public virtual ObjectResult<usp_GetMemberAcctList_Result4> usp_GetMemberAcctList(string acctName)
        {
            var acctNameParameter = acctName != null ?
                new ObjectParameter("AcctName", acctName) :
                new ObjectParameter("AcctName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetMemberAcctList_Result4>("usp_GetMemberAcctList", acctNameParameter);
        }
    
        public virtual int InsertLoginLogs(Nullable<int> cLIENTID)
        {
            var cLIENTIDParameter = cLIENTID.HasValue ?
                new ObjectParameter("CLIENTID", cLIENTID) :
                new ObjectParameter("CLIENTID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertLoginLogs", cLIENTIDParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> GetServerDate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("GetServerDate");
        }
    
        public virtual ObjectResult<PrintSavingsAccount_Result> PrintSavingsAccount(string accountNo, string cifkey, string startDate, string endDate)
        {
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var cifkeyParameter = cifkey != null ?
                new ObjectParameter("Cifkey", cifkey) :
                new ObjectParameter("Cifkey", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PrintSavingsAccount_Result>("PrintSavingsAccount", accountNoParameter, cifkeyParameter, startDateParameter, endDateParameter);
        }
    }
}
